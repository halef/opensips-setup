####### Global Parameters #########

log_level=3
log_stderror=no
log_facility=LOG_LOCAL0

children=4

debug_mode=yes # TODO: Comment this for production usage

auto_aliases=no

listen=udp:%%INTERNAL_IP%%:5060

####### Modules Section ########

#set module path
mpath="%%OPENSIPS_HOME%%/lib64/opensips/modules/" 

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Path module
loadmodule "path.so"

######### python httpd used by xmlrpc
loadmodule "httpd.so"
modparam("httpd", "ip", "%%INTERNAL_IP%%")
modparam("httpd", "port", 8888)

loadmodule "mi_json.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)

#### MYSQL module
loadmodule "db_mysql.so"

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "DST_NAT")
modparam("usrloc", "db_mode", 0)
modparam("usrloc", "timer_interval", 5)

#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")

#### ACCounting module
loadmodule "acc.so"
#What special events should be accounted ?
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure the enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)

#### DIALOG module
loadmodule "dialog.so"
modparam("dialog", "dlg_match_mode", 1)
modparam("dialog", "default_timeout", 21600)  # 6 hours timeout
modparam("dialog", "db_mode", 0)  # save dialog info in database in real time if set to 1; 2 is delayed flush to database
mysql://opensips:opensipsrw@database.internal.org/opensips_backend
modparam("dialog", "db_url","%%DB_CONNECTION_URI%%")

#### Load Balancer
loadmodule "load_balancer.so"
modparam("load_balancer", "db_url","%%DB_CONNECTION_URI%%")
# ping every 30 secs the failed destinations
modparam("load_balancer", "probing_interval", 30)
modparam("load_balancer", "probing_from", "sip:pinger@%%INTERNAL_IP%%:5060")
# consider positive ping reply the 404
modparam("load_balancer", "probing_reply_codes", "404")

loadmodule "proto_udp.so"

#### Event Module
loadmodule "event_route.so"

#### xmlrpc way to get to MI commands
loadmodule "mi_xmlrpc_ng.so"

#### xmlrpc event listner
loadmodule "event_xmlrpc.so"

####### Routing Logic ########
startup_route {
	subscribe_event("E_HALEF_BYE_EVENT", "xmlrpc:127.0.0.1:8081:e_dummy_h");
	subscribe_event("E_HALEF_LB_FAIL_EVENT", "xmlrpc:127.0.0.1:8081:e_dummy_h");
	subscribe_event("E_HALEF_RELAY_FAILED_EVENT", "xmlrpc:127.0.0.1:8081:e_dummy_h");
	subscribe_event("E_HALEF_CALL_ACCEPTED_EVENT", "xmlrpc:127.0.0.1:8081:e_dummy_h");
	subscribe_event("E_HALEF_CANCELLED_EVENT", "xmlrpc:127.0.0.1:8081:e_dummy_h");
	subscribe_event("E_HALEF_ERROR_EVENT", "xmlrpc:127.0.0.1:8081:e_dummy_h");
	subscribe_event("E_HALEF_RESTART_COMBOBOX_EVENT", "xmlrpc:127.0.0.1:8081:e_dummy_h");
}

# main request routing logic

route {
    # only incoming SIP requests entering here
    if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

    xlog("SCRIPT:DBG: incoming $rm from $si:$sp, from $fu to $ru ($ci)\n");

    # if it has TO TAG, it is a sequential/in-dialog request
	if (has_totag())
		route(handle_sequential);

    # CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans())
			t_relay();
		exit;
	}

    # these are for text messages, which we do not handle right now
	if (is_method("PUBLISH|SUBSCRIBE"))
	{
		xlog("SCRIPT:DBG: CHAT PUBLISH AND SUBSCRIBE NOT SUPPORTED, send 503 and exit");
		sl_send_reply("503", "Service Unavailable");
		exit;
	}

    ########### only initial requests at this point #########
    if(lb_is_destination("$si", "$sp", "1"))
    {
        # we accept only calls
		if (is_method("INVITE"))
			route(from_fs);
    } else 
    {
        # incoming traffic from a possible subscriber

		# handle incoming REGISTER requests
		if (is_method("REGISTER"))
			route(handle_register);

		# also we accept calls
		if (is_method("INVITE"))
			route(from_user);
    }

    # we do not recognize / support the incoming method
	send_reply("405","Unsupported Method");
	exit;
}

route[handle_sequential]
{
	# handle hop-by-hop ACK (no routing required)
	if (is_method("ACK") && t_check_trans()) {
		t_relay();
		exit;
	}

	# sequential request within a dialog should
	# take the path determined by record-routing
	if (!loose_route()) {
		# we do record-routing for all our traffic, so we should not
		# receive any sequential requests without Route hdr.
		sl_send_reply("404", "Not Found");
		exit;
	}

	if ($DLG_status != NULL && !validate_dialog()) {
		xlog("SCRIPT:DBG: In-Dialog $rm from $si (callid=$ci) is not valid according to dialog\n");
		## exit;
	}

	# reading dialog variables only after loose route
	if (is_method("BYE")) {
		xlog("SCRIPT:DBG reason for dialog end: $DLG_end_reason dialog status: $DLG_status ");
		if($dlg_val(destip) != NULL){
			if($dlg_val(asteriskip)!= $dlg_val(destip)){
			    $avp(attr-name) = NULL;
				$avp(attr-name) = "comboBoxIP";
				$avp(attr-val) = NULL;
				$avp(attr-val) = $dlg_val(destip);
				raise_event("E_HALEF_BYE_EVENT", $avp(attr-name), $avp(attr-val));
				xlog("SCRIPT:DBG: E_HALEF_BYE_EVENT $dlg_val(destip) raised rdialog status: $DLG_status \n");
			}
		}
	}

	xlog("SCRIPT:DBG: sequential $rm sent to $ru/$du\n");
	route(relay);
	exit;
}

route[handle_register]
{
	xlog("SCRIPT:DBG: relaying REGISTER for $tu to FS\n");

	
	# XXX - hopefully let any register
	if ( is_method("REGISTER") ) {
		xlog("SCRIPT:DBG: REGISTER consumed, send 200");
		sl_send_reply( "200", "OK");
		exit;
	}
	exit;
}

route[from_user]
{
	xlog("SCRIPT:DBG: $rm from customer ($fu) to $ru \n");
	route(init_call);

	xlog("SCRIPT:DBG: sending call to local subscriber $ru\n");

	# send the request to FS
	route(route_to_fs);
	exit;
}

route[from_fs]
{
	xlog("SCRIPT:DBG: call from FreeSWITCH $si for $ru\n");
	route(init_call);

	xlog("SCRIPT:DBG: sending call to local subscriber $ru\n");

	# dst/RURI points to the new destination
	route(relay);
	exit;
}

route[route_to_fs]
{
	xlog("SCRIPT:DBG: sending $rm to servers for $rU\n");

	if (!is_method("INVITE"))
    {
        # load balance here (lb_)
		if (!load_balance("1", "$hdr(X-Autoscaling-Group)")) {
		    $avp(attr-name) = NULL;
			$avp(attr-name) = "autoScaleGroup";
			$avp(attr-val) = NULL;
			$avp(attr-val) = $hdr(X-Autoscaling-Group);
			raise_event("E_HALEF_LB_FAIL_EVENT", $avp(attr-name), $avp(attr-val));
		    send_reply("503", "Route Unavailable");
			xlog("SCRIPT:DBG: LOAD BALANCER FAILED, E_HALEF_LB_FAIL_EVENT raised, returning 503 - for autoScaleGroup: $hdr(X-Autoscaling-Group) , dialog status: $DLG_status \n");
		    exit;
		}

		t_on_failure("FS_lb_failure");
    } else 
    {
		# load balance here (lb_)
		if (!load_balance("1", "$hdr(X-Autoscaling-Group)")) {
		    $avp(attr-name) = NULL;
			$avp(attr-name) = "autoScaleGroup";
			$avp(attr-val) = NULL;
			$avp(attr-val) = $hdr(X-Autoscaling-Group);
			raise_event("E_HALEF_LB_FAIL_EVENT", $avp(attr-name), $avp(attr-val));
		    send_reply("503", "Route Unavailable");
			xlog("SCRIPT:DBG: LOAD BALANCER FAILED, E_HALEF_LB_FAIL_EVENT raised, returning 503 - for autoScaleGroup: $hdr(X-Autoscaling-Group) , dialog status: $DLG_status \n");
			
		    exit;
		}

		t_on_failure("FS_lb_failure");
    }

    # store ips for Asterisk and FS
	$dlg_val(destip)=$(du{s.select,1,:});
	$dlg_val(asteriskip)=$fd;		
	xlog("SCRIPT:DBG: LOAD BALANCER SUCCESS - selected destination is: $dlg_val(destip) asterisk ip  $dlg_val(asteriskip) dialog status: $DLG_status \n");
	
	
	# dst URI points to the new destination
	xlog("SCRIPT:DBG: attempting server $du\n");

	route(relay);
	exit;
}

route[init_call]
{
	# record routing
	record_route();

	# create dialog with timeout
	if ( !create_dialog("B") ) {
	    $avp(attr-name) = NULL;
		$avp(attr-name) = "autoScaleGroup";
		$avp(attr-val) = NULL;
		$avp(attr-val) = $hdr(X-Autoscaling-Group);
		raise_event("E_HALEF_ERROR_EVENT", $avp(attr-name), $avp(attr-val));
		send_reply("503", "Server Internal Error INV");
		xlog("SCRIPT:DBG: CREATE DIALOG FAILED, E_HALEF_ERROR_EVENT raised, returning 503 - for autoScaleGroup: $hdr(X-Autoscaling-Group) + , dialog status: $DLG_status \n");
		
		exit;
	}
}


route[relay] {
	xlog("SCRIPT:DBG: sending $rm out to $ru/$du\n");
	if (!t_relay()) {
	    $avp(attr-name) = NULL;
		$avp(attr-name) = "autoScaleGroup";
		$avp(attr-val) = NULL;
		$avp(attr-val) = $hdr(X-Autoscaling-Group);
		raise_event("E_HALEF_RELAY_FAILED_EVENT", $avp(attr-name), $avp(attr-val));
		send_reply("503", "Server Internal Error");
		xlog("SCRIPT:DBG: RELAY FAILED, E_HALEF_RELAY_FAILED_EVENT raised, returning 503 - for autoScaleGroup: $hdr(X-Autoscaling-Group) , dialog status: $DLG_status \n");
	};
	
	if (is_method("INVITE")){
		# There is only one call, because Asterisk is handling the regrister event
	    $avp(attr-name) = NULL;
		$avp(attr-name) = "autoScaleGroup";
		$avp(attr-val) = NULL;
		$avp(attr-val) = $hdr(X-Autoscaling-Group);
		raise_event("E_HALEF_CALL_ACCEPTED_EVENT", $avp(attr-name), $avp(attr-val));		
		xlog("SCRIPT:DBG: E_HALEF_CALL_ACCEPTED_EVENT raised - for autoScaleGroup: $hdr(X-Autoscaling-Group) , dialog status: $DLG_status \n");
	}
	
	exit;
}

failure_route[FS_lb_failure]
{
	xlog("SCRIPT:DBG: LOAD BALANCER FAILURE ROUTE CALLED - selected destination is: $dlg_val(destip) asterisk ip  $dlg_val(asteriskip) dialog status: $DLG_status \n");
	
	## ignore call failure due caller canceling
	if (t_was_cancelled()) {
	    $avp(attr-name) = NULL;
		$avp(attr-name) = "autoScaleGroup";
		$avp(attr-val) = NULL;
		$avp(attr-val) = $hdr(X-Autoscaling-Group);
		raise_event("E_HALEF_CANCELLED_EVENT", $avp(attr-name), $avp(attr-val));
		t_reply("487","Request cancelled");
		xlog("SCRIPT:DBG: CANCELLED, E_HALEF_CANCELLED_EVENT raised, returning 487 - selected destination is: $du dialog status: $DLG_status \n");
		exit;
	}

	## was it a FS failure?
	#   - a 5xx/6xx reply
	#   - locally generated timeout
	if (t_check_status( "[56][0-9][0-9]" ) ||
	(t_local_replied("all") && t_check_status("408"))) {
		xlog("SCRIPT:ERROR: FS $du $dlg_val(destip) failed, marking and trying the next one\n");
		lb_disable_dst();
		$avp(attr-name) = NULL;
		$avp(attr-name) = "comboBoxIP";
		$avp(attr-val) = NULL;
		$avp(attr-val) = $dlg_val(destip);
		raise_event("E_HALEF_RESTART_COMBOBOX_EVENT", $avp(attr-name), $avp(attr-val));
		xlog("SCRIPT:DBG: E_HALEF_RESTART_COMBOBOX_EVENT raised for $dlg_val(destip) \n");

		# load balance here (lb_)
		if (!lb_next()) {
			$avp(attr-name) = NULL;
			$avp(attr-name) = "autoScaleGroup";
			$avp(attr-val) = NULL;
			$avp(attr-val) = $hdr(X-Autoscaling-Group);
			raise_event("E_HALEF_LB_FAIL_EVENT", $avp(attr-name), $avp(attr-val));
			t_reply("500", "Service Unavailable");
			xlog("SCRIPT:DBG: LOAD BALANCER NEXT FAILED, E_HALEF_LB_FAIL_EVENT raised returning 500 - for autoScaleGroup: $hdr(X-Autoscaling-Group) , dialog status: $DLG_status \n");
			
			exit;
		}

		t_on_failure("FS_lb_failure");

		#store ips for Asterisk and FS
		$dlg_val(destip)=$(du{s.select,1,:});
		$dlg_val(asteriskip)=$fd;		
		xlog("LOAD BALANCER SUCCESS - selected destination is: $dlg_val(destip) asterisk ip  $dlg_val(asteriskip) dialog status: $DLG_status \n");
		
		xlog("SCRIPT:DBG: new FS to try is $du\n");
		route(relay);
	}

	## call failures will be simply passed back to caller
	exit;                                                                                                                                                                                                                                                                      
}

# E_LOAD_BALANCER_STATUS event is raised when a destination changes status (enable or disable)
event_route[E_LOAD_BALANCER_STATUS] {
	$avp(first)=NULL;
	$avp(second)=NULL;
	$avp(third)=NULL;
	fetch_event_params("$avp(first);$avp(second);$avp(third)");
	xlog("$avp(first)");
	xlog("$avp(second)");
	xlog("$avp(third)");
	$avp(ip)=NULL;
	$avp(ip)=$(avp(second){s.select,1,:});

	xlog("SCRIPT:DBG:The E_LOAD_BALANCER_STATUS event_route group $avp(first) uri $avp(second) status $avp(third) ip: $avp(ip) \n");

	if ( $avp(second) == "disabled" ){
		$avp(attr-name) = NULL;
		$avp(attr-name) = "comboBoxIP";
		$avp(attr-val) = NULL;
		$avp(attr-val) = $avp(ip);
		raise_event("E_HALEF_RESTART_COMBOBOX_EVENT", $avp(attr-name), $avp(attr-val));
		xlog("SCRIPT:DBG:The E_HALEF_RESTART_COMBOBOX_EVENT raised for ip $avp(ip) \n");
	}
}
		